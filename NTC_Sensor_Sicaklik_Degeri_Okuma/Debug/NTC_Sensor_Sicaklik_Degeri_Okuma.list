
NTC_Sensor_Sicaklik_Degeri_Okuma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800319c  0800319c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031a4  080031a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080031ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000b4  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008cff  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000150b  00000000  00000000  00028da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0002a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000698  00000000  00000000  0002a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002067b  00000000  00000000  0002b058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008a27  00000000  00000000  0004b6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae5b  00000000  00000000  000540fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011ef55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f18  00000000  00000000  0011efa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003168 	.word	0x08003168

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08003168 	.word	0x08003168

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96e 	b.w	8000dd4 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468c      	mov	ip, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8083 	bne.w	8000c26 <__udivmoddi4+0x116>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d947      	bls.n	8000bb6 <__udivmoddi4+0xa6>
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b142      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2c:	f1c2 0020 	rsb	r0, r2, #32
 8000b30:	fa24 f000 	lsr.w	r0, r4, r0
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4097      	lsls	r7, r2
 8000b38:	ea40 0c01 	orr.w	ip, r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbbc f6f8 	udiv	r6, ip, r8
 8000b48:	fa1f fe87 	uxth.w	lr, r7
 8000b4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb06 f10e 	mul.w	r1, r6, lr
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 8119 	bcs.w	8000d98 <__udivmoddi4+0x288>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8116 	bls.w	8000d98 <__udivmoddi4+0x288>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 8105 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f240 8102 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba0:	eba4 040e 	sub.w	r4, r4, lr
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xaa>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d150      	bne.n	8000c64 <__udivmoddi4+0x154>
 8000bc2:	1bcb      	subs	r3, r1, r7
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f f887 	uxth.w	r8, r7
 8000bcc:	2601      	movs	r6, #1
 8000bce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd2:	0c21      	lsrs	r1, r4, #16
 8000bd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000be4:	1879      	adds	r1, r7, r1
 8000be6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0xe2>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	f200 80e9 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	b2a3      	uxth	r3, r4
 8000bf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c04:	fb08 f800 	mul.w	r8, r8, r0
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0x10c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x10a>
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	f200 80d9 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	eba4 0408 	sub.w	r4, r4, r8
 8000c20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c24:	e7bf      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x12e>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <__udivmoddi4+0x282>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x1cc>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0x140>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80b8 	bhi.w	8000dc0 <__udivmoddi4+0x2b0>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0103 	sbc.w	r1, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0a8      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000c5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f603 	lsr.w	r6, r0, r3
 8000c6c:	4097      	lsls	r7, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	4330      	orrs	r0, r6
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f108 	mul.w	r1, r6, r8
 8000c90:	4299      	cmp	r1, r3
 8000c92:	fa04 f402 	lsl.w	r4, r4, r2
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x19c>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9e:	f080 808d 	bcs.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 808a 	bls.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b281      	uxth	r1, r0
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb00 f308 	mul.w	r3, r0, r8
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1c4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cca:	d273      	bcs.n	8000db4 <__udivmoddi4+0x2a4>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d971      	bls.n	8000db4 <__udivmoddi4+0x2a4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4439      	add	r1, r7
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cda:	e778      	b.n	8000bce <__udivmoddi4+0xbe>
 8000cdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fa1f f884 	uxth.w	r8, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d12:	458a      	cmp	sl, r1
 8000d14:	fa02 f206 	lsl.w	r2, r2, r6
 8000d18:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x220>
 8000d1e:	1861      	adds	r1, r4, r1
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d248      	bcs.n	8000db8 <__udivmoddi4+0x2a8>
 8000d26:	458a      	cmp	sl, r1
 8000d28:	d946      	bls.n	8000db8 <__udivmoddi4+0x2a8>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4421      	add	r1, r4
 8000d30:	eba1 010a 	sub.w	r1, r1, sl
 8000d34:	b2bf      	uxth	r7, r7
 8000d36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x24a>
 8000d4a:	19e7      	adds	r7, r4, r7
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d22e      	bcs.n	8000db0 <__udivmoddi4+0x2a0>
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d92c      	bls.n	8000db0 <__udivmoddi4+0x2a0>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4427      	add	r7, r4
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba7 0708 	sub.w	r7, r7, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454f      	cmp	r7, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	d31a      	bcc.n	8000da4 <__udivmoddi4+0x294>
 8000d6e:	d017      	beq.n	8000da0 <__udivmoddi4+0x290>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x27a>
 8000d72:	ebb3 020e 	subs.w	r2, r3, lr
 8000d76:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7e:	40f2      	lsrs	r2, r6
 8000d80:	ea4c 0202 	orr.w	r2, ip, r2
 8000d84:	40f7      	lsrs	r7, r6
 8000d86:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	462e      	mov	r6, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	e70b      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	e6e9      	b.n	8000b70 <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fd      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da0:	4543      	cmp	r3, r8
 8000da2:	d2e5      	bcs.n	8000d70 <__udivmoddi4+0x260>
 8000da4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dac:	3801      	subs	r0, #1
 8000dae:	e7df      	b.n	8000d70 <__udivmoddi4+0x260>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e7d2      	b.n	8000d5a <__udivmoddi4+0x24a>
 8000db4:	4660      	mov	r0, ip
 8000db6:	e78d      	b.n	8000cd4 <__udivmoddi4+0x1c4>
 8000db8:	4681      	mov	r9, r0
 8000dba:	e7b9      	b.n	8000d30 <__udivmoddi4+0x220>
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	e775      	b.n	8000cac <__udivmoddi4+0x19c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e74a      	b.n	8000c5a <__udivmoddi4+0x14a>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	4439      	add	r1, r7
 8000dca:	e713      	b.n	8000bf4 <__udivmoddi4+0xe4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	e724      	b.n	8000c1c <__udivmoddi4+0x10c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <Thermistor>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
double Thermistor(int analogValue){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

 double temperature;
 temperature = log(((40950000 / analogValue) - 10000));
 8000de0:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <Thermistor+0xe0>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000de8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000dec:	3b10      	subs	r3, #16
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fb3c 	bl	800046c <__aeabi_i2d>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	ec43 2b10 	vmov	d0, r2, r3
 8000dfc:	f001 ffa8 	bl	8002d50 <log>
 8000e00:	ed87 0b02 	vstr	d0, [r7, #8]
 temperature = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * temperature * temperature)) * temperature);
 8000e04:	a324      	add	r3, pc, #144	; (adr r3, 8000e98 <Thermistor+0xc0>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e0e:	f7ff fb97 	bl	8000540 <__aeabi_dmul>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e1e:	f7ff fb8f 	bl	8000540 <__aeabi_dmul>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	a31d      	add	r3, pc, #116	; (adr r3, 8000ea0 <Thermistor+0xc8>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff f9d0 	bl	80001d4 <__adddf3>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e40:	f7ff fb7e 	bl	8000540 <__aeabi_dmul>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	a316      	add	r3, pc, #88	; (adr r3, 8000ea8 <Thermistor+0xd0>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff f9bf 	bl	80001d4 <__adddf3>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	4917      	ldr	r1, [pc, #92]	; (8000ebc <Thermistor+0xe4>)
 8000e60:	f7ff fc98 	bl	8000794 <__aeabi_ddiv>
 8000e64:	4602      	mov	r2, r0
 8000e66:	460b      	mov	r3, r1
 8000e68:	e9c7 2302 	strd	r2, r3, [r7, #8]
 temperature = temperature - 273.15;
 8000e6c:	a310      	add	r3, pc, #64	; (adr r3, 8000eb0 <Thermistor+0xd8>)
 8000e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e76:	f7ff f9ab 	bl	80001d0 <__aeabi_dsub>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 return temperature;
 8000e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e86:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e8e:	eef0 0a67 	vmov.f32	s1, s15
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	14170d19 	.word	0x14170d19
 8000e9c:	3e7788eb 	.word	0x3e7788eb
 8000ea0:	6fb4c3c2 	.word	0x6fb4c3c2
 8000ea4:	3f2eafee 	.word	0x3f2eafee
 8000ea8:	6edeb890 	.word	0x6edeb890
 8000eac:	3f527ffd 	.word	0x3f527ffd
 8000eb0:	66666666 	.word	0x66666666
 8000eb4:	40711266 	.word	0x40711266
 8000eb8:	0270d8f0 	.word	0x0270d8f0
 8000ebc:	3ff00000 	.word	0x3ff00000

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f000 fa5a 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f82a 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f90e 	bl	80010ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ed0:	f000 f890 	bl	8000ff4 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000ed4:	f000 f8e0 	bl	8001098 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


HAL_ADC_Start(&hadc1);
 8000ed8:	480e      	ldr	r0, [pc, #56]	; (8000f14 <main+0x54>)
 8000eda:	f000 fb29 	bl	8001530 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  adc_Value=HAL_ADC_GetValue(&hadc1);
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <main+0x54>)
 8000ee0:	f000 fbf8 	bl	80016d4 <HAL_ADC_GetValue>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <main+0x58>)
 8000eea:	801a      	strh	r2, [r3, #0]

	  	temp = Thermistor(adc_Value);
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <main+0x58>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff71 	bl	8000dd8 <Thermistor>
 8000ef6:	ec53 2b10 	vmov	r2, r3, d0
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fdcf 	bl	8000aa0 <__aeabi_d2uiz>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <main+0x5c>)
 8000f08:	801a      	strh	r2, [r3, #0]
	  	HAL_Delay(200);
 8000f0a:	20c8      	movs	r0, #200	; 0xc8
 8000f0c:	f000 faa8 	bl	8001460 <HAL_Delay>
	  	  adc_Value=HAL_ADC_GetValue(&hadc1);
 8000f10:	e7e5      	b.n	8000ede <main+0x1e>
 8000f12:	bf00      	nop
 8000f14:	200000d8 	.word	0x200000d8
 8000f18:	20000120 	.word	0x20000120
 8000f1c:	200000d4 	.word	0x200000d4

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	; 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 ff06 	bl	8002d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <SystemClock_Config+0xcc>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <SystemClock_Config+0xd0>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f84:	2310      	movs	r3, #16
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f94:	23a8      	movs	r3, #168	; 0xa8
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f843 	bl	8002030 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb0:	f000 f8c4 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 faa4 	bl	8002520 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fde:	f000 f8ad 	bl	800113c <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3750      	adds	r7, #80	; 0x50
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_ADC1_Init+0x98>)
 8001008:	4a21      	ldr	r2, [pc, #132]	; (8001090 <MX_ADC1_Init+0x9c>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_ADC1_Init+0x98>)
 800100e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_ADC1_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_ADC1_Init+0x98>)
 8001022:	2201      	movs	r2, #1
 8001024:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <MX_ADC1_Init+0x98>)
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <MX_ADC1_Init+0xa0>)
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <MX_ADC1_Init+0x98>)
 8001042:	2201      	movs	r2, #1
 8001044:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_ADC1_Init+0x98>)
 8001050:	2201      	movs	r2, #1
 8001052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001054:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_ADC1_Init+0x98>)
 8001056:	f000 fa27 	bl	80014a8 <HAL_ADC_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001060:	f000 f86c 	bl	800113c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800106c:	2303      	movs	r3, #3
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_ADC1_Init+0x98>)
 8001076:	f000 fb3b 	bl	80016f0 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001080:	f000 f85c 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000d8 	.word	0x200000d8
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART3_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART3_UART_Init+0x4c>)
 80010d0:	f001 fbf6 	bl	80028c0 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f000 f82f 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000090 	.word	0x20000090
 80010e8:	40004800 	.word	0x40004800

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_GPIO_Init+0x4c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <MX_GPIO_Init+0x4c>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_GPIO_Init+0x4c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	683b      	ldr	r3, [r7, #0]

}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	; (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_ADC_MspInit+0x7c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d127      	bne.n	800120a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_ADC_MspInit+0x80>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_ADC_MspInit+0x80>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_ADC_MspInit+0x80>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_ADC_MspInit+0x80>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_ADC_MspInit+0x80>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_ADC_MspInit+0x80>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f2:	2301      	movs	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_ADC_MspInit+0x84>)
 8001206:	f000 fd77 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012000 	.word	0x40012000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_UART_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12c      	bne.n	800129c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_UART_MspInit+0x88>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_UART_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800127a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_UART_MspInit+0x8c>)
 8001298:	f000 fd2e 	bl	8001cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f890 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001360 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800132e:	490e      	ldr	r1, [pc, #56]	; (8001368 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001330:	4a0e      	ldr	r2, [pc, #56]	; (800136c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001334:	e002      	b.n	800133c <LoopCopyDataInit>

08001336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133a:	3304      	adds	r3, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800133c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001340:	d3f9      	bcc.n	8001336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001344:	4c0b      	ldr	r4, [pc, #44]	; (8001374 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001348:	e001      	b.n	800134e <LoopFillZerobss>

0800134a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134c:	3204      	adds	r2, #4

0800134e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001350:	d3fb      	bcc.n	800134a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001352:	f7ff ffd7 	bl	8001304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f001 fccf 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135a:	f7ff fdb1 	bl	8000ec0 <main>
  bx  lr    
 800135e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800136c:	080031ac 	.word	0x080031ac
  ldr r2, =_sbss
 8001370:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001374:	20000128 	.word	0x20000128

08001378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_Init+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_Init+0x40>)
 8001386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800138a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_Init+0x40>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <HAL_Init+0x40>)
 8001392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x40>)
 800139e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 fc73 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff feca 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fc7d 	bl	8001cde <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 fc53 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x20>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x24>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_IncTick+0x24>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008
 8001444:	20000124 	.word	0x20000124

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_GetTick+0x14>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000124 	.word	0x20000124

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff ffee 	bl	8001448 <HAL_GetTick>
 800146c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001486:	bf00      	nop
 8001488:	f7ff ffde 	bl	8001448 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e033      	b.n	8001526 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d109      	bne.n	80014da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff fe66 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ee:	f023 0302 	bic.w	r3, r3, #2
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa1a 	bl	8001934 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	f043 0201 	orr.w	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
 8001516:	e001      	b.n	800151c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001542:	2b01      	cmp	r3, #1
 8001544:	d101      	bne.n	800154a <HAL_ADC_Start+0x1a>
 8001546:	2302      	movs	r3, #2
 8001548:	e0b2      	b.n	80016b0 <HAL_ADC_Start+0x180>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d018      	beq.n	8001592 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0201 	orr.w	r2, r2, #1
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <HAL_ADC_Start+0x18c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a52      	ldr	r2, [pc, #328]	; (80016c0 <HAL_ADC_Start+0x190>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9a      	lsrs	r2, r3, #18
 800157c:	4613      	mov	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	3b01      	subs	r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d17a      	bne.n	8001696 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015de:	d106      	bne.n	80015ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	f023 0206 	bic.w	r2, r3, #6
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	645a      	str	r2, [r3, #68]	; 0x44
 80015ec:	e002      	b.n	80015f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_ADC_Start+0x194>)
 80015fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	2b00      	cmp	r3, #0
 8001614:	d12a      	bne.n	800166c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a2b      	ldr	r2, [pc, #172]	; (80016c8 <HAL_ADC_Start+0x198>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d015      	beq.n	800164c <HAL_ADC_Start+0x11c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a29      	ldr	r2, [pc, #164]	; (80016cc <HAL_ADC_Start+0x19c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d105      	bne.n	8001636 <HAL_ADC_Start+0x106>
 800162a:	4b26      	ldr	r3, [pc, #152]	; (80016c4 <HAL_ADC_Start+0x194>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00a      	beq.n	800164c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_ADC_Start+0x1a0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d136      	bne.n	80016ae <HAL_ADC_Start+0x17e>
 8001640:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_ADC_Start+0x194>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d130      	bne.n	80016ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d129      	bne.n	80016ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	e020      	b.n	80016ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <HAL_ADC_Start+0x198>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11b      	bne.n	80016ae <HAL_ADC_Start+0x17e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d114      	bne.n	80016ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e00b      	b.n	80016ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f043 0210 	orr.w	r2, r3, #16
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20000000 	.word	0x20000000
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	40012300 	.word	0x40012300
 80016c8:	40012000 	.word	0x40012000
 80016cc:	40012100 	.word	0x40012100
 80016d0:	40012200 	.word	0x40012200

080016d4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADC_ConfigChannel+0x1c>
 8001708:	2302      	movs	r3, #2
 800170a:	e105      	b.n	8001918 <HAL_ADC_ConfigChannel+0x228>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d925      	bls.n	8001768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68d9      	ldr	r1, [r3, #12]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3b1e      	subs	r3, #30
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43da      	mvns	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	400a      	ands	r2, r1
 8001740:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	4603      	mov	r3, r0
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4403      	add	r3, r0
 800175a:	3b1e      	subs	r3, #30
 800175c:	409a      	lsls	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	e022      	b.n	80017ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	2207      	movs	r2, #7
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4618      	mov	r0, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4403      	add	r3, r0
 80017a4:	409a      	lsls	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b06      	cmp	r3, #6
 80017b4:	d824      	bhi.n	8001800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	3b05      	subs	r3, #5
 80017c8:	221f      	movs	r2, #31
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43da      	mvns	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	400a      	ands	r2, r1
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b05      	subs	r3, #5
 80017f2:	fa00 f203 	lsl.w	r2, r0, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34
 80017fe:	e04c      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b0c      	cmp	r3, #12
 8001806:	d824      	bhi.n	8001852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b23      	subs	r3, #35	; 0x23
 800181a:	221f      	movs	r2, #31
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43da      	mvns	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	400a      	ands	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3b23      	subs	r3, #35	; 0x23
 8001844:	fa00 f203 	lsl.w	r2, r0, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	631a      	str	r2, [r3, #48]	; 0x30
 8001850:	e023      	b.n	800189a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b41      	subs	r3, #65	; 0x41
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b41      	subs	r3, #65	; 0x41
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_ADC_ConfigChannel+0x234>)
 800189c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a21      	ldr	r2, [pc, #132]	; (8001928 <HAL_ADC_ConfigChannel+0x238>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d109      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_ADC_ConfigChannel+0x238>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d123      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d003      	beq.n	80018d6 <HAL_ADC_ConfigChannel+0x1e6>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b11      	cmp	r3, #17
 80018d4:	d11b      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d111      	bne.n	800190e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_ADC_ConfigChannel+0x23c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_ADC_ConfigChannel+0x240>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9a      	lsrs	r2, r3, #18
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001900:	e002      	b.n	8001908 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3b01      	subs	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f9      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40012300 	.word	0x40012300
 8001928:	40012000 	.word	0x40012000
 800192c:	20000000 	.word	0x20000000
 8001930:	431bde83 	.word	0x431bde83

08001934 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800193c:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <ADC_Init+0x1f0>)
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	431a      	orrs	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	021a      	lsls	r2, r3, #8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	4a58      	ldr	r2, [pc, #352]	; (8001b28 <ADC_Init+0x1f4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d022      	beq.n	8001a12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e00f      	b.n	8001a32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0202 	bic.w	r2, r2, #2
 8001a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6899      	ldr	r1, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7e1b      	ldrb	r3, [r3, #24]
 8001a4c:	005a      	lsls	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	035a      	lsls	r2, r3, #13
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e007      	b.n	8001aa8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	051a      	lsls	r2, r3, #20
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aea:	025a      	lsls	r2, r3, #9
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6899      	ldr	r1, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	029a      	lsls	r2, r3, #10
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	40012300 	.word	0x40012300
 8001b28:	0f000001 	.word	0x0f000001

08001b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <__NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff8e 	bl	8001b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff47 	bl	8001b2c <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff5c 	bl	8001b74 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff8e 	bl	8001be4 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5d 	bl	8001b90 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffb0 	bl	8001c4c <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e16b      	b.n	8001fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d14:	2201      	movs	r2, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	4013      	ands	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 815a 	bne.w	8001fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d005      	beq.n	8001d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d130      	bne.n	8001dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 0201 	and.w	r2, r3, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d017      	beq.n	8001de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d123      	bne.n	8001e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	08da      	lsrs	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3208      	adds	r2, #8
 8001dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80b4 	beq.w	8001fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b60      	ldr	r3, [pc, #384]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a5f      	ldr	r2, [pc, #380]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_GPIO_Init+0x30c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9a:	4a5b      	ldr	r2, [pc, #364]	; (8002008 <HAL_GPIO_Init+0x310>)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x314>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a51      	ldr	r2, [pc, #324]	; (8002010 <HAL_GPIO_Init+0x318>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_GPIO_Init+0x31c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_GPIO_Init+0x320>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x21a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4e      	ldr	r2, [pc, #312]	; (800201c <HAL_GPIO_Init+0x324>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x216>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4d      	ldr	r2, [pc, #308]	; (8002020 <HAL_GPIO_Init+0x328>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x212>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4c      	ldr	r2, [pc, #304]	; (8002024 <HAL_GPIO_Init+0x32c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x20e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4b      	ldr	r2, [pc, #300]	; (8002028 <HAL_GPIO_Init+0x330>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x20a>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e00e      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f02:	2308      	movs	r3, #8
 8001f04:	e00c      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e00a      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e008      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e006      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e004      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x228>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	69fa      	ldr	r2, [r7, #28]
 8001f22:	f002 0203 	and.w	r2, r2, #3
 8001f26:	0092      	lsls	r2, r2, #2
 8001f28:	4093      	lsls	r3, r2
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f30:	4935      	ldr	r1, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x310>)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f62:	4a32      	ldr	r2, [pc, #200]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f68:	4b30      	ldr	r3, [pc, #192]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <HAL_GPIO_Init+0x334>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_GPIO_Init+0x334>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_GPIO_Init+0x334>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_GPIO_Init+0x334>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	2b0f      	cmp	r3, #15
 8001ff0:	f67f ae90 	bls.w	8001d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40013800 	.word	0x40013800
 800200c:	40020000 	.word	0x40020000
 8002010:	40020400 	.word	0x40020400
 8002014:	40020800 	.word	0x40020800
 8002018:	40020c00 	.word	0x40020c00
 800201c:	40021000 	.word	0x40021000
 8002020:	40021400 	.word	0x40021400
 8002024:	40021800 	.word	0x40021800
 8002028:	40021c00 	.word	0x40021c00
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e264      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	4ba3      	ldr	r3, [pc, #652]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b04      	cmp	r3, #4
 8002058:	d00c      	beq.n	8002074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205a:	4ba0      	ldr	r3, [pc, #640]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002062:	2b08      	cmp	r3, #8
 8002064:	d112      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002066:	4b9d      	ldr	r3, [pc, #628]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002072:	d10b      	bne.n	800208c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	4b99      	ldr	r3, [pc, #612]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05b      	beq.n	8002138 <HAL_RCC_OscConfig+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d157      	bne.n	8002138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e23f      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d106      	bne.n	80020a4 <HAL_RCC_OscConfig+0x74>
 8002096:	4b91      	ldr	r3, [pc, #580]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a90      	ldr	r2, [pc, #576]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800209c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	e01d      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x98>
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a8a      	ldr	r2, [pc, #552]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b88      	ldr	r3, [pc, #544]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a87      	ldr	r2, [pc, #540]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0xb0>
 80020c8:	4b84      	ldr	r3, [pc, #528]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a83      	ldr	r2, [pc, #524]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a80      	ldr	r2, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f9ae 	bl	8001448 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f9aa 	bl	8001448 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e204      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0xc0>
 800210e:	e014      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff f99a 	bl	8001448 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002118:	f7ff f996 	bl	8001448 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	; 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e1f0      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0xe8>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	4b65      	ldr	r3, [pc, #404]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002152:	4b62      	ldr	r3, [pc, #392]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215a:	2b08      	cmp	r3, #8
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215e:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d116      	bne.n	8002198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216a:	4b5c      	ldr	r3, [pc, #368]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_RCC_OscConfig+0x152>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e1c4      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4952      	ldr	r1, [pc, #328]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002196:	e03a      	b.n	800220e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d020      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCC_OscConfig+0x2b0>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff f94f 	bl	8001448 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff f94b 	bl	8001448 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1a5      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021cc:	4b43      	ldr	r3, [pc, #268]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4940      	ldr	r1, [pc, #256]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
 80021e0:	e015      	b.n	800220e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0x2b0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff f92e 	bl	8001448 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f0:	f7ff f92a 	bl	8001448 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e184      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d030      	beq.n	800227c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <HAL_RCC_OscConfig+0x2b4>)
 8002224:	2201      	movs	r2, #1
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002228:	f7ff f90e 	bl	8001448 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002230:	f7ff f90a 	bl	8001448 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e164      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x200>
 800224e:	e015      	b.n	800227c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x2b4>)
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff f8f7 	bl	8001448 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225e:	f7ff f8f3 	bl	8001448 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e14d      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a0 	beq.w	80023ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10f      	bne.n	80022ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_OscConfig+0x2b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d121      	bne.n	800230a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_RCC_OscConfig+0x2b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_RCC_OscConfig+0x2b8>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7ff f8b9 	bl	8001448 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	e011      	b.n	80022fe <HAL_RCC_OscConfig+0x2ce>
 80022da:	bf00      	nop
 80022dc:	40023800 	.word	0x40023800
 80022e0:	42470000 	.word	0x42470000
 80022e4:	42470e80 	.word	0x42470e80
 80022e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ec:	f7ff f8ac 	bl	8001448 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e106      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x4e4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x2f0>
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	e01c      	b.n	800235a <HAL_RCC_OscConfig+0x32a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b05      	cmp	r3, #5
 8002326:	d10c      	bne.n	8002342 <HAL_RCC_OscConfig+0x312>
 8002328:	4b7b      	ldr	r3, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a7a      	ldr	r2, [pc, #488]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	4b78      	ldr	r3, [pc, #480]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a77      	ldr	r2, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	e00b      	b.n	800235a <HAL_RCC_OscConfig+0x32a>
 8002342:	4b75      	ldr	r3, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002346:	4a74      	ldr	r2, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6713      	str	r3, [r2, #112]	; 0x70
 800234e:	4b72      	ldr	r3, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a71      	ldr	r2, [pc, #452]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002354:	f023 0304 	bic.w	r3, r3, #4
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d015      	beq.n	800238e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7ff f871 	bl	8001448 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7ff f86d 	bl	8001448 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0c5      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002380:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ee      	beq.n	800236a <HAL_RCC_OscConfig+0x33a>
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7ff f85b 	bl	8001448 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002396:	f7ff f857 	bl	8001448 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0af      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ac:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1ee      	bne.n	8002396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b56      	ldr	r3, [pc, #344]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a55      	ldr	r2, [pc, #340]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 809b 	beq.w	800250a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d05c      	beq.n	800249a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d141      	bne.n	800246c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x4ec>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7ff f82b 	bl	8001448 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f6:	f7ff f827 	bl	8001448 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e081      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002408:	4b43      	ldr	r3, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	019b      	lsls	r3, r3, #6
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	3b01      	subs	r3, #1
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_OscConfig+0x4ec>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff f800 	bl	8001448 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fffc 	bl	8001448 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e056      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x41c>
 800246a:	e04e      	b.n	800250a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x4ec>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe ffe9 	bl	8001448 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe ffe5 	bl	8001448 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e03f      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x44a>
 8002498:	e037      	b.n	800250a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e032      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a6:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_RCC_OscConfig+0x4e8>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d028      	beq.n	8002506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d11a      	bne.n	8002506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024de:	4293      	cmp	r3, r2
 80024e0:	d111      	bne.n	8002506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	3b01      	subs	r3, #1
 80024f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40007000 	.word	0x40007000
 8002518:	40023800 	.word	0x40023800
 800251c:	42470060 	.word	0x42470060

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0cc      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b68      	ldr	r3, [pc, #416]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d90c      	bls.n	800255c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b65      	ldr	r3, [pc, #404]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b8      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a58      	ldr	r2, [pc, #352]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800257e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	494d      	ldr	r1, [pc, #308]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d044      	beq.n	8002640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d003      	beq.n	80025de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e06f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e067      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b37      	ldr	r3, [pc, #220]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4934      	ldr	r1, [pc, #208]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7fe ff1a 	bl	8001448 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7fe ff16 	bl	8001448 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e04f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d20c      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e032      	b.n	80026ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4916      	ldr	r1, [pc, #88]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	490e      	ldr	r1, [pc, #56]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a6:	f000 f821 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	490a      	ldr	r1, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	5ccb      	ldrb	r3, [r1, r3]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fe7a 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40023c00 	.word	0x40023c00
 80026dc:	40023800 	.word	0x40023800
 80026e0:	08003180 	.word	0x08003180
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b5b0      	push	{r4, r5, r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026f2:	2100      	movs	r1, #0
 80026f4:	6079      	str	r1, [r7, #4]
 80026f6:	2100      	movs	r1, #0
 80026f8:	60f9      	str	r1, [r7, #12]
 80026fa:	2100      	movs	r1, #0
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026fe:	2100      	movs	r1, #0
 8002700:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002702:	4952      	ldr	r1, [pc, #328]	; (800284c <HAL_RCC_GetSysClockFreq+0x160>)
 8002704:	6889      	ldr	r1, [r1, #8]
 8002706:	f001 010c 	and.w	r1, r1, #12
 800270a:	2908      	cmp	r1, #8
 800270c:	d00d      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3e>
 800270e:	2908      	cmp	r1, #8
 8002710:	f200 8094 	bhi.w	800283c <HAL_RCC_GetSysClockFreq+0x150>
 8002714:	2900      	cmp	r1, #0
 8002716:	d002      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x32>
 8002718:	2904      	cmp	r1, #4
 800271a:	d003      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x38>
 800271c:	e08e      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800271e:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCC_GetSysClockFreq+0x164>)
 8002720:	60bb      	str	r3, [r7, #8]
       break;
 8002722:	e08e      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_RCC_GetSysClockFreq+0x168>)
 8002726:	60bb      	str	r3, [r7, #8]
      break;
 8002728:	e08b      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800272a:	4948      	ldr	r1, [pc, #288]	; (800284c <HAL_RCC_GetSysClockFreq+0x160>)
 800272c:	6849      	ldr	r1, [r1, #4]
 800272e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002732:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002734:	4945      	ldr	r1, [pc, #276]	; (800284c <HAL_RCC_GetSysClockFreq+0x160>)
 8002736:	6849      	ldr	r1, [r1, #4]
 8002738:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800273c:	2900      	cmp	r1, #0
 800273e:	d024      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <HAL_RCC_GetSysClockFreq+0x160>)
 8002742:	6849      	ldr	r1, [r1, #4]
 8002744:	0989      	lsrs	r1, r1, #6
 8002746:	4608      	mov	r0, r1
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002750:	f04f 0500 	mov.w	r5, #0
 8002754:	ea00 0204 	and.w	r2, r0, r4
 8002758:	ea01 0305 	and.w	r3, r1, r5
 800275c:	493d      	ldr	r1, [pc, #244]	; (8002854 <HAL_RCC_GetSysClockFreq+0x168>)
 800275e:	fb01 f003 	mul.w	r0, r1, r3
 8002762:	2100      	movs	r1, #0
 8002764:	fb01 f102 	mul.w	r1, r1, r2
 8002768:	1844      	adds	r4, r0, r1
 800276a:	493a      	ldr	r1, [pc, #232]	; (8002854 <HAL_RCC_GetSysClockFreq+0x168>)
 800276c:	fba2 0101 	umull	r0, r1, r2, r1
 8002770:	1863      	adds	r3, r4, r1
 8002772:	4619      	mov	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	461a      	mov	r2, r3
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	f7fe f9b0 	bl	8000ae0 <__aeabi_uldivmod>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4613      	mov	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e04a      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278a:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCC_GetSysClockFreq+0x160>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	099b      	lsrs	r3, r3, #6
 8002790:	461a      	mov	r2, r3
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	ea02 0400 	and.w	r4, r2, r0
 80027a2:	ea03 0501 	and.w	r5, r3, r1
 80027a6:	4620      	mov	r0, r4
 80027a8:	4629      	mov	r1, r5
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	014b      	lsls	r3, r1, #5
 80027b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b8:	0142      	lsls	r2, r0, #5
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	1b00      	subs	r0, r0, r4
 80027c0:	eb61 0105 	sbc.w	r1, r1, r5
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	018b      	lsls	r3, r1, #6
 80027ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027d2:	0182      	lsls	r2, r0, #6
 80027d4:	1a12      	subs	r2, r2, r0
 80027d6:	eb63 0301 	sbc.w	r3, r3, r1
 80027da:	f04f 0000 	mov.w	r0, #0
 80027de:	f04f 0100 	mov.w	r1, #0
 80027e2:	00d9      	lsls	r1, r3, #3
 80027e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e8:	00d0      	lsls	r0, r2, #3
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	1912      	adds	r2, r2, r4
 80027f0:	eb45 0303 	adc.w	r3, r5, r3
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0299      	lsls	r1, r3, #10
 80027fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002802:	0290      	lsls	r0, r2, #10
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4610      	mov	r0, r2
 800280a:	4619      	mov	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f7fe f964 	bl	8000ae0 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002820:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_RCC_GetSysClockFreq+0x160>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	60bb      	str	r3, [r7, #8]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_RCC_GetSysClockFreq+0x164>)
 800283e:	60bb      	str	r3, [r7, #8]
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	68bb      	ldr	r3, [r7, #8]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bdb0      	pop	{r4, r5, r7, pc}
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	017d7840 	.word	0x017d7840

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08003190 	.word	0x08003190

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffdc 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08003190 	.word	0x08003190

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03f      	b.n	8002952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fc9a 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f829 	bl	800295c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002960:	b09f      	sub	sp, #124	; 0x7c
 8002962:	af00      	add	r7, sp, #0
 8002964:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002972:	68d9      	ldr	r1, [r3, #12]
 8002974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	ea40 0301 	orr.w	r3, r0, r1
 800297c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	431a      	orrs	r2, r3
 800298e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029a0:	f021 010c 	bic.w	r1, r1, #12
 80029a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029aa:	430b      	orrs	r3, r1
 80029ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ba:	6999      	ldr	r1, [r3, #24]
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	ea40 0301 	orr.w	r3, r0, r1
 80029c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4bc5      	ldr	r3, [pc, #788]	; (8002ce0 <UART_SetConfig+0x384>)
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d004      	beq.n	80029da <UART_SetConfig+0x7e>
 80029d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4bc3      	ldr	r3, [pc, #780]	; (8002ce4 <UART_SetConfig+0x388>)
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d103      	bne.n	80029e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029da:	f7ff ff5d 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 80029de:	6778      	str	r0, [r7, #116]	; 0x74
 80029e0:	e002      	b.n	80029e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029e2:	f7ff ff45 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 80029e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f0:	f040 80b6 	bne.w	8002b60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029f6:	461c      	mov	r4, r3
 80029f8:	f04f 0500 	mov.w	r5, #0
 80029fc:	4622      	mov	r2, r4
 80029fe:	462b      	mov	r3, r5
 8002a00:	1891      	adds	r1, r2, r2
 8002a02:	6439      	str	r1, [r7, #64]	; 0x40
 8002a04:	415b      	adcs	r3, r3
 8002a06:	647b      	str	r3, [r7, #68]	; 0x44
 8002a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a0c:	1912      	adds	r2, r2, r4
 8002a0e:	eb45 0303 	adc.w	r3, r5, r3
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	00d9      	lsls	r1, r3, #3
 8002a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a20:	00d0      	lsls	r0, r2, #3
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	1911      	adds	r1, r2, r4
 8002a28:	6639      	str	r1, [r7, #96]	; 0x60
 8002a2a:	416b      	adcs	r3, r5
 8002a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	461a      	mov	r2, r3
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	1891      	adds	r1, r2, r2
 8002a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a3c:	415b      	adcs	r3, r3
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a48:	f7fe f84a 	bl	8000ae0 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4ba5      	ldr	r3, [pc, #660]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002a52:	fba3 2302 	umull	r2, r3, r3, r2
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	011e      	lsls	r6, r3, #4
 8002a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a5c:	461c      	mov	r4, r3
 8002a5e:	f04f 0500 	mov.w	r5, #0
 8002a62:	4622      	mov	r2, r4
 8002a64:	462b      	mov	r3, r5
 8002a66:	1891      	adds	r1, r2, r2
 8002a68:	6339      	str	r1, [r7, #48]	; 0x30
 8002a6a:	415b      	adcs	r3, r3
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a72:	1912      	adds	r2, r2, r4
 8002a74:	eb45 0303 	adc.w	r3, r5, r3
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	00d9      	lsls	r1, r3, #3
 8002a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a86:	00d0      	lsls	r0, r2, #3
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	1911      	adds	r1, r2, r4
 8002a8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a90:	416b      	adcs	r3, r5
 8002a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	1891      	adds	r1, r2, r2
 8002aa0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002aa2:	415b      	adcs	r3, r3
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002aae:	f7fe f817 	bl	8000ae0 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4b8c      	ldr	r3, [pc, #560]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	2164      	movs	r1, #100	; 0x64
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	3332      	adds	r3, #50	; 0x32
 8002aca:	4a87      	ldr	r2, [pc, #540]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ad8:	441e      	add	r6, r3
 8002ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002adc:	4618      	mov	r0, r3
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	1894      	adds	r4, r2, r2
 8002ae8:	623c      	str	r4, [r7, #32]
 8002aea:	415b      	adcs	r3, r3
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
 8002aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002af2:	1812      	adds	r2, r2, r0
 8002af4:	eb41 0303 	adc.w	r3, r1, r3
 8002af8:	f04f 0400 	mov.w	r4, #0
 8002afc:	f04f 0500 	mov.w	r5, #0
 8002b00:	00dd      	lsls	r5, r3, #3
 8002b02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b06:	00d4      	lsls	r4, r2, #3
 8002b08:	4622      	mov	r2, r4
 8002b0a:	462b      	mov	r3, r5
 8002b0c:	1814      	adds	r4, r2, r0
 8002b0e:	653c      	str	r4, [r7, #80]	; 0x50
 8002b10:	414b      	adcs	r3, r1
 8002b12:	657b      	str	r3, [r7, #84]	; 0x54
 8002b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	1891      	adds	r1, r2, r2
 8002b20:	61b9      	str	r1, [r7, #24]
 8002b22:	415b      	adcs	r3, r3
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b2e:	f7fd ffd7 	bl	8000ae0 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4b6c      	ldr	r3, [pc, #432]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	; 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 0207 	and.w	r2, r3, #7
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4432      	add	r2, r6
 8002b5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b5e:	e0b9      	b.n	8002cd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b62:	461c      	mov	r4, r3
 8002b64:	f04f 0500 	mov.w	r5, #0
 8002b68:	4622      	mov	r2, r4
 8002b6a:	462b      	mov	r3, r5
 8002b6c:	1891      	adds	r1, r2, r2
 8002b6e:	6139      	str	r1, [r7, #16]
 8002b70:	415b      	adcs	r3, r3
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b78:	1912      	adds	r2, r2, r4
 8002b7a:	eb45 0303 	adc.w	r3, r5, r3
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	00d9      	lsls	r1, r3, #3
 8002b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b8c:	00d0      	lsls	r0, r2, #3
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	eb12 0804 	adds.w	r8, r2, r4
 8002b96:	eb43 0905 	adc.w	r9, r3, r5
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bb2:	0082      	lsls	r2, r0, #2
 8002bb4:	4640      	mov	r0, r8
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	f7fd ff92 	bl	8000ae0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	011e      	lsls	r6, r3, #4
 8002bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	1894      	adds	r4, r2, r2
 8002bd8:	60bc      	str	r4, [r7, #8]
 8002bda:	415b      	adcs	r3, r3
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002be2:	1812      	adds	r2, r2, r0
 8002be4:	eb41 0303 	adc.w	r3, r1, r3
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	f04f 0500 	mov.w	r5, #0
 8002bf0:	00dd      	lsls	r5, r3, #3
 8002bf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002bf6:	00d4      	lsls	r4, r2, #3
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	1814      	adds	r4, r2, r0
 8002bfe:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c00:	414b      	adcs	r3, r1
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	008b      	lsls	r3, r1, #2
 8002c18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c1c:	0082      	lsls	r2, r0, #2
 8002c1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c22:	f7fd ff5d 	bl	8000ae0 <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	2164      	movs	r1, #100	; 0x64
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	3332      	adds	r3, #50	; 0x32
 8002c3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	095b      	lsrs	r3, r3, #5
 8002c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4a:	441e      	add	r6, r3
 8002c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	1894      	adds	r4, r2, r2
 8002c5a:	603c      	str	r4, [r7, #0]
 8002c5c:	415b      	adcs	r3, r3
 8002c5e:	607b      	str	r3, [r7, #4]
 8002c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c64:	1812      	adds	r2, r2, r0
 8002c66:	eb41 0303 	adc.w	r3, r1, r3
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	f04f 0500 	mov.w	r5, #0
 8002c72:	00dd      	lsls	r5, r3, #3
 8002c74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c78:	00d4      	lsls	r4, r2, #3
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	eb12 0a00 	adds.w	sl, r2, r0
 8002c82:	eb43 0b01 	adc.w	fp, r3, r1
 8002c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	008b      	lsls	r3, r1, #2
 8002c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c9e:	0082      	lsls	r2, r0, #2
 8002ca0:	4650      	mov	r0, sl
 8002ca2:	4659      	mov	r1, fp
 8002ca4:	f7fd ff1c 	bl	8000ae0 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002cae:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	2164      	movs	r1, #100	; 0x64
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	3332      	adds	r3, #50	; 0x32
 8002cc0:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <UART_SetConfig+0x38c>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	f003 020f 	and.w	r2, r3, #15
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4432      	add	r2, r6
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	377c      	adds	r7, #124	; 0x7c
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cde:	bf00      	nop
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	40011400 	.word	0x40011400
 8002ce8:	51eb851f 	.word	0x51eb851f

08002cec <__errno>:
 8002cec:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <__errno+0x8>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	; (8002d30 <__libc_init_array+0x38>)
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	; (8002d34 <__libc_init_array+0x3c>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	2600      	movs	r6, #0
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	; (8002d38 <__libc_init_array+0x40>)
 8002d0a:	4c0c      	ldr	r4, [pc, #48]	; (8002d3c <__libc_init_array+0x44>)
 8002d0c:	f000 fa2c 	bl	8003168 <_init>
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	2600      	movs	r6, #0
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	080031a4 	.word	0x080031a4
 8002d34:	080031a4 	.word	0x080031a4
 8002d38:	080031a4 	.word	0x080031a4
 8002d3c:	080031a8 	.word	0x080031a8

08002d40 <memset>:
 8002d40:	4402      	add	r2, r0
 8002d42:	4603      	mov	r3, r0
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d100      	bne.n	8002d4a <memset+0xa>
 8002d48:	4770      	bx	lr
 8002d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4e:	e7f9      	b.n	8002d44 <memset+0x4>

08002d50 <log>:
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	ed2d 8b02 	vpush	{d8}
 8002d56:	ec55 4b10 	vmov	r4, r5, d0
 8002d5a:	f000 f841 	bl	8002de0 <__ieee754_log>
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <log+0x88>)
 8002d60:	eeb0 8a40 	vmov.f32	s16, s0
 8002d64:	eef0 8a60 	vmov.f32	s17, s1
 8002d68:	f993 3000 	ldrsb.w	r3, [r3]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	d01a      	beq.n	8002da6 <log+0x56>
 8002d70:	4622      	mov	r2, r4
 8002d72:	462b      	mov	r3, r5
 8002d74:	4620      	mov	r0, r4
 8002d76:	4629      	mov	r1, r5
 8002d78:	f7fd fe7c 	bl	8000a74 <__aeabi_dcmpun>
 8002d7c:	b998      	cbnz	r0, 8002da6 <log+0x56>
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2300      	movs	r3, #0
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	f7fd fe6b 	bl	8000a60 <__aeabi_dcmpgt>
 8002d8a:	b960      	cbnz	r0, 8002da6 <log+0x56>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2300      	movs	r3, #0
 8002d90:	4620      	mov	r0, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	f7fd fe3c 	bl	8000a10 <__aeabi_dcmpeq>
 8002d98:	b160      	cbz	r0, 8002db4 <log+0x64>
 8002d9a:	f7ff ffa7 	bl	8002cec <__errno>
 8002d9e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8002dd0 <log+0x80>
 8002da2:	2322      	movs	r3, #34	; 0x22
 8002da4:	6003      	str	r3, [r0, #0]
 8002da6:	eeb0 0a48 	vmov.f32	s0, s16
 8002daa:	eef0 0a68 	vmov.f32	s1, s17
 8002dae:	ecbd 8b02 	vpop	{d8}
 8002db2:	bd38      	pop	{r3, r4, r5, pc}
 8002db4:	f7ff ff9a 	bl	8002cec <__errno>
 8002db8:	ecbd 8b02 	vpop	{d8}
 8002dbc:	2321      	movs	r3, #33	; 0x21
 8002dbe:	6003      	str	r3, [r0, #0]
 8002dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <log+0x8c>)
 8002dc6:	f000 b9c7 	b.w	8003158 <nan>
 8002dca:	bf00      	nop
 8002dcc:	f3af 8000 	nop.w
 8002dd0:	00000000 	.word	0x00000000
 8002dd4:	fff00000 	.word	0xfff00000
 8002dd8:	20000070 	.word	0x20000070
 8002ddc:	08003198 	.word	0x08003198

08002de0 <__ieee754_log>:
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	ec51 0b10 	vmov	r0, r1, d0
 8002de8:	ed2d 8b04 	vpush	{d8-d9}
 8002dec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002df0:	b083      	sub	sp, #12
 8002df2:	460d      	mov	r5, r1
 8002df4:	da29      	bge.n	8002e4a <__ieee754_log+0x6a>
 8002df6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002dfa:	4303      	orrs	r3, r0
 8002dfc:	ee10 2a10 	vmov	r2, s0
 8002e00:	d10c      	bne.n	8002e1c <__ieee754_log+0x3c>
 8002e02:	49cf      	ldr	r1, [pc, #828]	; (8003140 <__ieee754_log+0x360>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fcc3 	bl	8000794 <__aeabi_ddiv>
 8002e0e:	ec41 0b10 	vmov	d0, r0, r1
 8002e12:	b003      	add	sp, #12
 8002e14:	ecbd 8b04 	vpop	{d8-d9}
 8002e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	da05      	bge.n	8002e2c <__ieee754_log+0x4c>
 8002e20:	460b      	mov	r3, r1
 8002e22:	f7fd f9d5 	bl	80001d0 <__aeabi_dsub>
 8002e26:	2200      	movs	r2, #0
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7ee      	b.n	8002e0a <__ieee754_log+0x2a>
 8002e2c:	4bc5      	ldr	r3, [pc, #788]	; (8003144 <__ieee754_log+0x364>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f7fd fb86 	bl	8000540 <__aeabi_dmul>
 8002e34:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8002e38:	460d      	mov	r5, r1
 8002e3a:	4ac3      	ldr	r2, [pc, #780]	; (8003148 <__ieee754_log+0x368>)
 8002e3c:	4295      	cmp	r5, r2
 8002e3e:	dd06      	ble.n	8002e4e <__ieee754_log+0x6e>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	f7fd f9c6 	bl	80001d4 <__adddf3>
 8002e48:	e7e1      	b.n	8002e0e <__ieee754_log+0x2e>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e7f5      	b.n	8002e3a <__ieee754_log+0x5a>
 8002e4e:	152c      	asrs	r4, r5, #20
 8002e50:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002e54:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002e58:	441c      	add	r4, r3
 8002e5a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8002e5e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8002e6a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8002e6e:	ea42 0105 	orr.w	r1, r2, r5
 8002e72:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8002e76:	2200      	movs	r2, #0
 8002e78:	4bb4      	ldr	r3, [pc, #720]	; (800314c <__ieee754_log+0x36c>)
 8002e7a:	f7fd f9a9 	bl	80001d0 <__aeabi_dsub>
 8002e7e:	1cab      	adds	r3, r5, #2
 8002e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	4682      	mov	sl, r0
 8002e88:	468b      	mov	fp, r1
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	dc53      	bgt.n	8002f38 <__ieee754_log+0x158>
 8002e90:	2300      	movs	r3, #0
 8002e92:	f7fd fdbd 	bl	8000a10 <__aeabi_dcmpeq>
 8002e96:	b1d0      	cbz	r0, 8002ece <__ieee754_log+0xee>
 8002e98:	2c00      	cmp	r4, #0
 8002e9a:	f000 8122 	beq.w	80030e2 <__ieee754_log+0x302>
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7fd fae4 	bl	800046c <__aeabi_i2d>
 8002ea4:	a390      	add	r3, pc, #576	; (adr r3, 80030e8 <__ieee754_log+0x308>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	4606      	mov	r6, r0
 8002eac:	460f      	mov	r7, r1
 8002eae:	f7fd fb47 	bl	8000540 <__aeabi_dmul>
 8002eb2:	a38f      	add	r3, pc, #572	; (adr r3, 80030f0 <__ieee754_log+0x310>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	4604      	mov	r4, r0
 8002eba:	460d      	mov	r5, r1
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	4639      	mov	r1, r7
 8002ec0:	f7fd fb3e 	bl	8000540 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	e7ba      	b.n	8002e44 <__ieee754_log+0x64>
 8002ece:	a38a      	add	r3, pc, #552	; (adr r3, 80030f8 <__ieee754_log+0x318>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	4650      	mov	r0, sl
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	f7fd fb32 	bl	8000540 <__aeabi_dmul>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	499b      	ldr	r1, [pc, #620]	; (8003150 <__ieee754_log+0x370>)
 8002ee4:	f7fd f974 	bl	80001d0 <__aeabi_dsub>
 8002ee8:	4652      	mov	r2, sl
 8002eea:	4606      	mov	r6, r0
 8002eec:	460f      	mov	r7, r1
 8002eee:	465b      	mov	r3, fp
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	4659      	mov	r1, fp
 8002ef4:	f7fd fb24 	bl	8000540 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4630      	mov	r0, r6
 8002efe:	4639      	mov	r1, r7
 8002f00:	f7fd fb1e 	bl	8000540 <__aeabi_dmul>
 8002f04:	4606      	mov	r6, r0
 8002f06:	460f      	mov	r7, r1
 8002f08:	b914      	cbnz	r4, 8002f10 <__ieee754_log+0x130>
 8002f0a:	4632      	mov	r2, r6
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	e0a2      	b.n	8003056 <__ieee754_log+0x276>
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7fd faab 	bl	800046c <__aeabi_i2d>
 8002f16:	a374      	add	r3, pc, #464	; (adr r3, 80030e8 <__ieee754_log+0x308>)
 8002f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1c:	4680      	mov	r8, r0
 8002f1e:	4689      	mov	r9, r1
 8002f20:	f7fd fb0e 	bl	8000540 <__aeabi_dmul>
 8002f24:	a372      	add	r3, pc, #456	; (adr r3, 80030f0 <__ieee754_log+0x310>)
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	460d      	mov	r5, r1
 8002f2e:	4640      	mov	r0, r8
 8002f30:	4649      	mov	r1, r9
 8002f32:	f7fd fb05 	bl	8000540 <__aeabi_dmul>
 8002f36:	e0a7      	b.n	8003088 <__ieee754_log+0x2a8>
 8002f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f3c:	f7fd f94a 	bl	80001d4 <__adddf3>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4650      	mov	r0, sl
 8002f46:	4659      	mov	r1, fp
 8002f48:	f7fd fc24 	bl	8000794 <__aeabi_ddiv>
 8002f4c:	ec41 0b18 	vmov	d8, r0, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7fd fa8b 	bl	800046c <__aeabi_i2d>
 8002f56:	ec53 2b18 	vmov	r2, r3, d8
 8002f5a:	ec41 0b19 	vmov	d9, r0, r1
 8002f5e:	ec51 0b18 	vmov	r0, r1, d8
 8002f62:	f7fd faed 	bl	8000540 <__aeabi_dmul>
 8002f66:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8002f6a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4680      	mov	r8, r0
 8002f76:	4689      	mov	r9, r1
 8002f78:	f7fd fae2 	bl	8000540 <__aeabi_dmul>
 8002f7c:	a360      	add	r3, pc, #384	; (adr r3, 8003100 <__ieee754_log+0x320>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	4606      	mov	r6, r0
 8002f84:	460f      	mov	r7, r1
 8002f86:	f7fd fadb 	bl	8000540 <__aeabi_dmul>
 8002f8a:	a35f      	add	r3, pc, #380	; (adr r3, 8003108 <__ieee754_log+0x328>)
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f7fd f920 	bl	80001d4 <__adddf3>
 8002f94:	4632      	mov	r2, r6
 8002f96:	463b      	mov	r3, r7
 8002f98:	f7fd fad2 	bl	8000540 <__aeabi_dmul>
 8002f9c:	a35c      	add	r3, pc, #368	; (adr r3, 8003110 <__ieee754_log+0x330>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	f7fd f917 	bl	80001d4 <__adddf3>
 8002fa6:	4632      	mov	r2, r6
 8002fa8:	463b      	mov	r3, r7
 8002faa:	f7fd fac9 	bl	8000540 <__aeabi_dmul>
 8002fae:	a35a      	add	r3, pc, #360	; (adr r3, 8003118 <__ieee754_log+0x338>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd f90e 	bl	80001d4 <__adddf3>
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	f7fd fac0 	bl	8000540 <__aeabi_dmul>
 8002fc0:	a357      	add	r3, pc, #348	; (adr r3, 8003120 <__ieee754_log+0x340>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	4680      	mov	r8, r0
 8002fc8:	4689      	mov	r9, r1
 8002fca:	4630      	mov	r0, r6
 8002fcc:	4639      	mov	r1, r7
 8002fce:	f7fd fab7 	bl	8000540 <__aeabi_dmul>
 8002fd2:	a355      	add	r3, pc, #340	; (adr r3, 8003128 <__ieee754_log+0x348>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd f8fc 	bl	80001d4 <__adddf3>
 8002fdc:	4632      	mov	r2, r6
 8002fde:	463b      	mov	r3, r7
 8002fe0:	f7fd faae 	bl	8000540 <__aeabi_dmul>
 8002fe4:	a352      	add	r3, pc, #328	; (adr r3, 8003130 <__ieee754_log+0x350>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd f8f3 	bl	80001d4 <__adddf3>
 8002fee:	4632      	mov	r2, r6
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	f7fd faa5 	bl	8000540 <__aeabi_dmul>
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4649      	mov	r1, r9
 8002ffc:	4640      	mov	r0, r8
 8002ffe:	f7fd f8e9 	bl	80001d4 <__adddf3>
 8003002:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003006:	9b01      	ldr	r3, [sp, #4]
 8003008:	3551      	adds	r5, #81	; 0x51
 800300a:	431d      	orrs	r5, r3
 800300c:	2d00      	cmp	r5, #0
 800300e:	4680      	mov	r8, r0
 8003010:	4689      	mov	r9, r1
 8003012:	dd48      	ble.n	80030a6 <__ieee754_log+0x2c6>
 8003014:	4b4e      	ldr	r3, [pc, #312]	; (8003150 <__ieee754_log+0x370>)
 8003016:	2200      	movs	r2, #0
 8003018:	4650      	mov	r0, sl
 800301a:	4659      	mov	r1, fp
 800301c:	f7fd fa90 	bl	8000540 <__aeabi_dmul>
 8003020:	4652      	mov	r2, sl
 8003022:	465b      	mov	r3, fp
 8003024:	f7fd fa8c 	bl	8000540 <__aeabi_dmul>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4606      	mov	r6, r0
 800302e:	460f      	mov	r7, r1
 8003030:	4640      	mov	r0, r8
 8003032:	4649      	mov	r1, r9
 8003034:	f7fd f8ce 	bl	80001d4 <__adddf3>
 8003038:	ec53 2b18 	vmov	r2, r3, d8
 800303c:	f7fd fa80 	bl	8000540 <__aeabi_dmul>
 8003040:	4680      	mov	r8, r0
 8003042:	4689      	mov	r9, r1
 8003044:	b964      	cbnz	r4, 8003060 <__ieee754_log+0x280>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4630      	mov	r0, r6
 800304c:	4639      	mov	r1, r7
 800304e:	f7fd f8bf 	bl	80001d0 <__aeabi_dsub>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4650      	mov	r0, sl
 8003058:	4659      	mov	r1, fp
 800305a:	f7fd f8b9 	bl	80001d0 <__aeabi_dsub>
 800305e:	e6d6      	b.n	8002e0e <__ieee754_log+0x2e>
 8003060:	a321      	add	r3, pc, #132	; (adr r3, 80030e8 <__ieee754_log+0x308>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	ec51 0b19 	vmov	r0, r1, d9
 800306a:	f7fd fa69 	bl	8000540 <__aeabi_dmul>
 800306e:	a320      	add	r3, pc, #128	; (adr r3, 80030f0 <__ieee754_log+0x310>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	4604      	mov	r4, r0
 8003076:	460d      	mov	r5, r1
 8003078:	ec51 0b19 	vmov	r0, r1, d9
 800307c:	f7fd fa60 	bl	8000540 <__aeabi_dmul>
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	f7fd f8a6 	bl	80001d4 <__adddf3>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4630      	mov	r0, r6
 800308e:	4639      	mov	r1, r7
 8003090:	f7fd f89e 	bl	80001d0 <__aeabi_dsub>
 8003094:	4652      	mov	r2, sl
 8003096:	465b      	mov	r3, fp
 8003098:	f7fd f89a 	bl	80001d0 <__aeabi_dsub>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4620      	mov	r0, r4
 80030a2:	4629      	mov	r1, r5
 80030a4:	e7d9      	b.n	800305a <__ieee754_log+0x27a>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4650      	mov	r0, sl
 80030ac:	4659      	mov	r1, fp
 80030ae:	f7fd f88f 	bl	80001d0 <__aeabi_dsub>
 80030b2:	ec53 2b18 	vmov	r2, r3, d8
 80030b6:	f7fd fa43 	bl	8000540 <__aeabi_dmul>
 80030ba:	4606      	mov	r6, r0
 80030bc:	460f      	mov	r7, r1
 80030be:	2c00      	cmp	r4, #0
 80030c0:	f43f af23 	beq.w	8002f0a <__ieee754_log+0x12a>
 80030c4:	a308      	add	r3, pc, #32	; (adr r3, 80030e8 <__ieee754_log+0x308>)
 80030c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ca:	ec51 0b19 	vmov	r0, r1, d9
 80030ce:	f7fd fa37 	bl	8000540 <__aeabi_dmul>
 80030d2:	a307      	add	r3, pc, #28	; (adr r3, 80030f0 <__ieee754_log+0x310>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	4604      	mov	r4, r0
 80030da:	460d      	mov	r5, r1
 80030dc:	ec51 0b19 	vmov	r0, r1, d9
 80030e0:	e727      	b.n	8002f32 <__ieee754_log+0x152>
 80030e2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8003138 <__ieee754_log+0x358>
 80030e6:	e694      	b.n	8002e12 <__ieee754_log+0x32>
 80030e8:	fee00000 	.word	0xfee00000
 80030ec:	3fe62e42 	.word	0x3fe62e42
 80030f0:	35793c76 	.word	0x35793c76
 80030f4:	3dea39ef 	.word	0x3dea39ef
 80030f8:	55555555 	.word	0x55555555
 80030fc:	3fd55555 	.word	0x3fd55555
 8003100:	df3e5244 	.word	0xdf3e5244
 8003104:	3fc2f112 	.word	0x3fc2f112
 8003108:	96cb03de 	.word	0x96cb03de
 800310c:	3fc74664 	.word	0x3fc74664
 8003110:	94229359 	.word	0x94229359
 8003114:	3fd24924 	.word	0x3fd24924
 8003118:	55555593 	.word	0x55555593
 800311c:	3fe55555 	.word	0x3fe55555
 8003120:	d078c69f 	.word	0xd078c69f
 8003124:	3fc39a09 	.word	0x3fc39a09
 8003128:	1d8e78af 	.word	0x1d8e78af
 800312c:	3fcc71c5 	.word	0x3fcc71c5
 8003130:	9997fa04 	.word	0x9997fa04
 8003134:	3fd99999 	.word	0x3fd99999
	...
 8003140:	c3500000 	.word	0xc3500000
 8003144:	43500000 	.word	0x43500000
 8003148:	7fefffff 	.word	0x7fefffff
 800314c:	3ff00000 	.word	0x3ff00000
 8003150:	3fe00000 	.word	0x3fe00000
 8003154:	00000000 	.word	0x00000000

08003158 <nan>:
 8003158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8003160 <nan+0x8>
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	00000000 	.word	0x00000000
 8003164:	7ff80000 	.word	0x7ff80000

08003168 <_init>:
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316a:	bf00      	nop
 800316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316e:	bc08      	pop	{r3}
 8003170:	469e      	mov	lr, r3
 8003172:	4770      	bx	lr

08003174 <_fini>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	bf00      	nop
 8003178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317a:	bc08      	pop	{r3}
 800317c:	469e      	mov	lr, r3
 800317e:	4770      	bx	lr
